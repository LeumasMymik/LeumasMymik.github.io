---
layout: post
title:  "2021/03/19 Blog 17"
date:   2021-03-14 12:40:45 -0700
categories: Senior-Design
---
<html>
<style>
	html, body, h1, h2, h3, h4, h5, h6, p {
		font-family:  "Courier";
	}

	pre code {
                font-family: Consolas,"courier new";
		color: #666666;
		background-color: #ffe9ec;
		padding: 2px;
		padding-right: 7px;
        }
	
	body {
		background-color:#cce9ff;
	}

	.site-header {
		background-color:#ffe9ec;
	}

	.site-footer {
		background-color:#ffe9ec;
	}

	.row {
 		display: flex;
	}

	.column {
  		flex: 33.33%;
  		padding: 20px;
	}
	
	.scalable {
		width: 50%;
		height: auto;
	}
</style>

<body>
<h1><b>Writing a Password Cracking Python Script Given a Password Dictionary and an Etc&lowbar;Shadow File</b></h1>
<p>This blog will document the steps for writing a python script that cracks hashed passwords within an etc&lowbar;shadow file based on passwords provided within a password dictionary.</p>
<br>

<h1><b>Reading the Files</b></h1>
<p>To start off, we will be using the python crypt module so we need to <code>import crypt</code>.</p>
<p>Then we need to read the etc&lowbar;shadow file within our python script. To do that I used the <code>with open</code> method to open the file and used a <code>for loop</code> to grab each line within the open file.</p>
<p>It should look something like this:</p>
<pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;import crypt
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;with open("etc&lowbar;shadow") as shadowFile:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for shadowLine in shadowFile:
</pre>
<br>

<h1><b>Splits</b></h1>
<p>Now that we are able to take in a line of the etc&lowbar;shadow file, we need to start separating the string to isolate both the encrypted password which includes: the id, salt, and the hashed password.</p>
<p>To accomplish this we can first get rid of the new line indication at the end of our string using the <code>strip</code> method, so that when we take in a line that we read we do not create an excess new line.</p>
<p>Then we can <code>split</code> the line that we read based on the <code>':'</code> character and grab the isolated string in the 1 position. Keep in mind that the position starts from position 0.</p>
<p>Once we have done that we can <code>split</code> our isolated encrypted password to further isolate just the id and salt of our encrypted password.</p>
<p>To do this we would need to <code>split</code> out isolated encrypted password based on the <code>'$'</code> character. Keep in mind that when we isolate the id and salt, we also need to add a '$' to the end of our isolated string to signify the end of our salt.</p>
<p>It should look something like this:</p>
<pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;import crypt
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;with open("etc&lowbar;shadow") as shadowFile:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for shadowLine in shadowFile:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shadowLine = shadowLine.strip()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encryptedPassword = shadowLine.split(':')[1]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;character = '$'
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;splitPassword = encryptedPassword.split(character)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;idSalt = character.join(splitPassword[:3])
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;idSalt = idSalt + "$"
</pre>
<br>

<h1><b>Checking If A Password Even Exists</b></h1>
<p>Next, I created an if statement to check if the isolated encrypted password even had a password to begin with so that we are not reading through every single user, directory, application, etc. listed in the file.</p>
<p>Within an etc&lowbar;shadow file, some of the lines show either <code>'&ast;'</code> or <code>'!!'</code> symbols which signify a null password value.</p>
<p>To do this I made an if statement that checks whether or not the isolated encrypted password starts with a '$' or not. If it does great a password exists and the script continues chugging along, but if it doesn't the script goes to the next line available in our etc&lowbar;shadow file and starts the process again.</p>
<p>So now our code should look something like this:</p>
<pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;import crypt
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;with open("etc&lowbar;shadow") as shadowFile:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for shadowLine in shadowFile:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shadowLine = shadowLine.strip()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;character = '$'
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;splitPassword = encryptedPassword.split(character)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;idSalt = character.join(splitPassword[:3])
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;idSalt = idSalt + "$"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if encryptedPassword[0] == '$':
</pre>
<br>

<h1><b>Hashing With Crypt</b></h1>
<p>After we know that the string has a password, we can open and read the password dictionary using the same method as the etc&lowbar;shadow file, keeping in mind to strip the excess new line.</p>
<p>Then we can use the <code>crypt.crypt</code> module to create our own encrypted password string using the password from the password dictionary and our isolated string containing our id and salt.</p>
<p>We can then compare our own encrypted password with the one that we have isolated from the etc&lowbar;shadow file and if they match we can have our script print out the user of the password that we were able to crack and the password that was cracked.</p>
<p>Which should look something like this:</p>
<pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;import crypt
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;with open("etc&lowbar;shadow") as shadowFile:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for shadowLine in shadowFile:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shadowLine = shadowLine.strip()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;character = '$'
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;splitPassword = encryptedPassword.split(character)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;idSalt = character.join(splitPassword[:3])
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;idSalt = idSalt + "$"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if encryptedPassword[0] == '$':
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;with open("100000passwords.txt") as passwordDictionary:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for word in passwordDictionary:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;word = word.strip()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hashed = crypt.crypt(word, idSalt)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if encryptedPassword == hashed:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("User found: " + shadowLine.split(':')[0])
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Password found: " + word)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break
</pre>
<br>
<h1><b>Output</b></h1>
<p>The output should look something like this:</p>
<img src="" alt="Output">
</body>
</html>
