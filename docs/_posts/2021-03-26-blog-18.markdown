---
layout: post
title:  "2021/03/26 Blog 18"
date:   2021-03-21 12:40:45 -0700
categories: Senior-Design
---
<html>
<style>
	html, body, h1, h2, h3, h4, h5, h6, p {
		font-family:  "Courier";
	}

	pre code {
                font-family: Consolas,"courier new";
		color: #666666;
		background-color: #ffe9ec;
		padding: 2px;
		padding-right: 7px;
        }
	
	body {
		background-color:#cce9ff;
	}

	.site-header {
		background-color:#ffe9ec;
	}

	.site-footer {
		background-color:#ffe9ec;
	}

	.row {
 		display: flex;
	}

	.column {
  		flex: 33.33%;
  		padding: 20px;
	}
	
	.scalable {
		width: 50%;
		height: auto;
	}
</style>

<body>
<h1><b>Number of Good Pairs</b></h1>
<p>This blog will document the steps for solving the LeetCode problem 1512. Number of Good Pairs using python as our programming language.</p>
<br>

<h1><b>Prompt</b></h1>
<p>The prompt states that Given an array of integers, we need to find and output the number of good pairs within the array.</p>
<p>A pair is good if the initial number and another number, not including itself, are equal. For example:</p>
<pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,2,3,1,1,3]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Good Pairs: 4
</pre>
<p>Given the array the good pairs would be position 0 and position 3, position 0 and position 4, position 2 and position 5, and position 3 and position 4,for a total of 4 good pairs.</p>
<br>

<h1><b>Nested Loop</b></h1>
<p>To get started I set the variable good equal to 0 under the skeleton code provided by LeetCode, to act as out counter for each good pair that we find.</p>
<p>Then I created a nested for loop, the outer most for loop will run based on the range of the length of the given array, and the innermost loop will run based on the starting index of the outermost loops current variable + 1 and an ending range based on the length of the given array.</p>
<p>For Example:</p>
<pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class Solution:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def numIdenticalPairs(self, nums: List[int]) -> int:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;good = 0
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for i in range(len(nums)):
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for j in range(i+1, len(nums)):
</pre>
<br>

<h1><b>Checking For Good Pairs</b></h1>
<p>Then within the innermost loop, we need to check for good pairs within the given array. To do this I created an if statement that would incrementally increase our good variable by a value of 1 if the array at the starting positions of each loop were equal to each other.</p>
<p>Then to output our solution I returned our good variable outside the boundaries of the nested loop.</p>
<p>For Example:</p>
<pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class Solution:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def numIdenticalPairs(self, nums: List[int]) -> int:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;good = 0
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for i in range(len(nums)):
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for j in range(i+1, len(nums)):
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if nums[i] == nums[j]:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;good += 1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(good)
</pre>
<br>
</body>
</html>
